// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/ocicni/pkg/ocicni (interfaces: CNIPlugin)
//
// Generated by this command:
//
//	mockgen -package ocicnitypesmock -destination ./test/mocks/ocicni/types.go github.com/cri-o/ocicni/pkg/ocicni CNIPlugin
//

// Package ocicnitypesmock is a generated GoMock package.
package ocicnitypesmock

import (
	context "context"
	reflect "reflect"

	ocicni "github.com/cri-o/ocicni/pkg/ocicni"
	gomock "go.uber.org/mock/gomock"
)

// MockCNIPlugin is a mock of CNIPlugin interface.
type MockCNIPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockCNIPluginMockRecorder
	isgomock struct{}
}

// MockCNIPluginMockRecorder is the mock recorder for MockCNIPlugin.
type MockCNIPluginMockRecorder struct {
	mock *MockCNIPlugin
}

// NewMockCNIPlugin creates a new mock instance.
func NewMockCNIPlugin(ctrl *gomock.Controller) *MockCNIPlugin {
	mock := &MockCNIPlugin{ctrl: ctrl}
	mock.recorder = &MockCNIPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCNIPlugin) EXPECT() *MockCNIPluginMockRecorder {
	return m.recorder
}

// GC mocks base method.
func (m *MockCNIPlugin) GC(ctx context.Context, validPods []*ocicni.PodNetwork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", ctx, validPods)
	ret0, _ := ret[0].(error)
	return ret0
}

// GC indicates an expected call of GC.
func (mr *MockCNIPluginMockRecorder) GC(ctx, validPods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockCNIPlugin)(nil).GC), ctx, validPods)
}

// GetDefaultNetworkName mocks base method.
func (m *MockCNIPlugin) GetDefaultNetworkName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultNetworkName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultNetworkName indicates an expected call of GetDefaultNetworkName.
func (mr *MockCNIPluginMockRecorder) GetDefaultNetworkName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultNetworkName", reflect.TypeOf((*MockCNIPlugin)(nil).GetDefaultNetworkName))
}

// GetPodNetworkStatus mocks base method.
func (m *MockCNIPlugin) GetPodNetworkStatus(network ocicni.PodNetwork) ([]ocicni.NetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodNetworkStatus", network)
	ret0, _ := ret[0].([]ocicni.NetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodNetworkStatus indicates an expected call of GetPodNetworkStatus.
func (mr *MockCNIPluginMockRecorder) GetPodNetworkStatus(network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodNetworkStatus", reflect.TypeOf((*MockCNIPlugin)(nil).GetPodNetworkStatus), network)
}

// GetPodNetworkStatusWithContext mocks base method.
func (m *MockCNIPlugin) GetPodNetworkStatusWithContext(ctx context.Context, network ocicni.PodNetwork) ([]ocicni.NetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodNetworkStatusWithContext", ctx, network)
	ret0, _ := ret[0].([]ocicni.NetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodNetworkStatusWithContext indicates an expected call of GetPodNetworkStatusWithContext.
func (mr *MockCNIPluginMockRecorder) GetPodNetworkStatusWithContext(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodNetworkStatusWithContext", reflect.TypeOf((*MockCNIPlugin)(nil).GetPodNetworkStatusWithContext), ctx, network)
}

// Name mocks base method.
func (m *MockCNIPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCNIPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCNIPlugin)(nil).Name))
}

// SetUpPod mocks base method.
func (m *MockCNIPlugin) SetUpPod(network ocicni.PodNetwork) ([]ocicni.NetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpPod", network)
	ret0, _ := ret[0].([]ocicni.NetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUpPod indicates an expected call of SetUpPod.
func (mr *MockCNIPluginMockRecorder) SetUpPod(network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpPod", reflect.TypeOf((*MockCNIPlugin)(nil).SetUpPod), network)
}

// SetUpPodWithContext mocks base method.
func (m *MockCNIPlugin) SetUpPodWithContext(ctx context.Context, network ocicni.PodNetwork) ([]ocicni.NetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpPodWithContext", ctx, network)
	ret0, _ := ret[0].([]ocicni.NetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUpPodWithContext indicates an expected call of SetUpPodWithContext.
func (mr *MockCNIPluginMockRecorder) SetUpPodWithContext(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpPodWithContext", reflect.TypeOf((*MockCNIPlugin)(nil).SetUpPodWithContext), ctx, network)
}

// Shutdown mocks base method.
func (m *MockCNIPlugin) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockCNIPluginMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCNIPlugin)(nil).Shutdown))
}

// Status mocks base method.
func (m *MockCNIPlugin) Status() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(error)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockCNIPluginMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockCNIPlugin)(nil).Status))
}

// StatusWithContext mocks base method.
func (m *MockCNIPlugin) StatusWithContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusWithContext indicates an expected call of StatusWithContext.
func (mr *MockCNIPluginMockRecorder) StatusWithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusWithContext", reflect.TypeOf((*MockCNIPlugin)(nil).StatusWithContext), ctx)
}

// TearDownPod mocks base method.
func (m *MockCNIPlugin) TearDownPod(network ocicni.PodNetwork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TearDownPod", network)
	ret0, _ := ret[0].(error)
	return ret0
}

// TearDownPod indicates an expected call of TearDownPod.
func (mr *MockCNIPluginMockRecorder) TearDownPod(network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDownPod", reflect.TypeOf((*MockCNIPlugin)(nil).TearDownPod), network)
}

// TearDownPodWithContext mocks base method.
func (m *MockCNIPlugin) TearDownPodWithContext(ctx context.Context, network ocicni.PodNetwork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TearDownPodWithContext", ctx, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// TearDownPodWithContext indicates an expected call of TearDownPodWithContext.
func (mr *MockCNIPluginMockRecorder) TearDownPodWithContext(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDownPodWithContext", reflect.TypeOf((*MockCNIPlugin)(nil).TearDownPodWithContext), ctx, network)
}
