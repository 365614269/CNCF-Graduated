// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/internal/config/seccomp/seccompociartifact (interfaces: Impl)
//
// Generated by this command:
//
//	mockgen -package seccompociartifactmock -destination ./test/mocks/seccompociartifact/seccompociartifact.go github.com/cri-o/cri-o/internal/config/seccomp/seccompociartifact Impl
//

// Package seccompociartifactmock is a generated GoMock package.
package seccompociartifactmock

import (
	context "context"
	reflect "reflect"

	ociartifact "github.com/cri-o/cri-o/internal/ociartifact"
	gomock "go.uber.org/mock/gomock"
)

// MockImpl is a mock of Impl interface.
type MockImpl struct {
	ctrl     *gomock.Controller
	recorder *MockImplMockRecorder
	isgomock struct{}
}

// MockImplMockRecorder is the mock recorder for MockImpl.
type MockImplMockRecorder struct {
	mock *MockImpl
}

// NewMockImpl creates a new mock instance.
func NewMockImpl(ctrl *gomock.Controller) *MockImpl {
	mock := &MockImpl{ctrl: ctrl}
	mock.recorder = &MockImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpl) EXPECT() *MockImplMockRecorder {
	return m.recorder
}

// PullData mocks base method.
func (m *MockImpl) PullData(arg0 context.Context, arg1 string, arg2 *ociartifact.PullOptions) ([]ociartifact.ArtifactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullData", arg0, arg1, arg2)
	ret0, _ := ret[0].([]ociartifact.ArtifactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullData indicates an expected call of PullData.
func (mr *MockImplMockRecorder) PullData(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullData", reflect.TypeOf((*MockImpl)(nil).PullData), arg0, arg1, arg2)
}
